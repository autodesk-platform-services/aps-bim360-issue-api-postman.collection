{
	"info": {
		"_postman_id": "f481b440-88bb-427a-9364-6a8a7a245000",
		"name": "BIM 360 Issue v2 API Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29581881"
	},
	"item": [
		{
			"name": "Run First",
			"item": [
				{
					"name": "01-GET One Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"01-GET One Account, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var account_name = pm.environment.get(\"account_name\") ",
									"",
									"pm.test(\"find matches account by id: \" + account_name, function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.data.find(d=>d.attributes.name == account_name)",
									"",
									"    pm.expect(find).not.eq(undefined); ",
									"    ",
									"    if(find){ ",
									"        pm.environment.set(\"account_id_without_b\", find.id.split(\"b.\").join(\"\"));",
									"    }else{",
									"        ",
									"    }",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/project/v1/hubs",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							]
						},
						"description": "GET all hubs of your account, and get one hub. Please provide the hub name (hub_name) in environment variables"
					},
					"response": []
				},
				{
					"name": "02-GET Issue and Location Container Id of One Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"02-GET Issue and Location Container Id of One Project, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var project_name = pm.environment.get(\"project_name\") ",
									"pm.test(\"find matches project by name: \" + project_name, function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.data.find(d=>d.attributes.name == project_name)",
									"",
									"    pm.expect(find).not.eq(undefined); ",
									"    ",
									"    if(find){ ",
									"        pm.environment.set(\"project_id_without_b\", find.id.split(\"b.\").join(\"\"));",
									"        pm.environment.set(\"issue_container_id\", find.relationships.issues.data.id);",
									"        pm.environment.set(\"location_container_id\", find.relationships.locations.data.id);",
									"",
									"    }else{",
									"        ",
									"    }",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/project/v1/hubs/b.{{account_id_without_b}}/projects",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								"b.{{account_id_without_b}}",
								"projects"
							]
						},
						"description": "GET all projects of one hub, and get one project Please provide the hub name (project_name) in environment variables"
					},
					"response": []
				},
				{
					"name": "03-GET Folder Urn of [Project Files]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"03-GET Folder Urn of [Project Files], Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"find folder of [Project Files]: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.data.find(d=>d.attributes.name == \"Project Files\")",
									"",
									"    pm.expect(find).not.eq(undefined); ",
									"    ",
									"    if(find){ ",
									"        pm.environment.set(\"project_files_folder_urn\", find.id) ",
									"",
									"    }else{",
									"        ",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/project/v1/hubs/b.{{account_id_without_b}}/projects/b.{{project_id_without_b}}/topFolders",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								"b.{{account_id_without_b}}",
								"projects",
								"b.{{project_id_without_b}}",
								"topFolders"
							]
						},
						"description": "GET all projects of one hub, and get one project Please provide the hub name (project_name) in environment variables"
					},
					"response": []
				},
				{
					"name": "04-GET One Document Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"04-GET One Document Data, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"find data of first document\", function () {",
									"    var body = JSON.parse(responseBody); ",
									"    var one_included = body.included[0]",
									"    pm.environment.set(\"one_document_base64_urn\", one_included.relationships.derivatives.data.id) ",
									" ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/data/v1/projects/:project_id/folders/:folder_id/contents",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"folders",
								":folder_id",
								"contents"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "b.{{project_id_without_b}}"
								},
								{
									"key": "folder_id",
									"value": "{{project_files_folder_urn}}"
								}
							]
						},
						"description": "GET all projects of one hub, and get one project Please provide the hub name (project_name) in environment variables"
					},
					"response": []
				},
				{
					"name": "03-Get One Project User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"03-Get One Project User Id, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"find one user id as assignee: \", function () {",
									"    var body = JSON.parse(responseBody);  ",
									"",
									"    //assignee requires autodeskId",
									"    pm.environment.set(\"one_user_id\", body.results[0].autodeskId); ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/bim360/admin/v1/projects/:projectId/users",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"admin",
								"v1",
								"projects",
								":projectId",
								"users"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04-GET One Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get locations collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"get one location id: \", function () {",
									"    var body = JSON.parse(responseBody); ",
									"    pm.expect(body.results).not.eq(undefined);  ",
									"    //the first location ",
									"    pm.environment.set(\"one_location_id\", body.results[1].id);",
									"     ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_domain}}/bim360/locations/v2/containers/:containerId/trees/:treeId/nodes",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"locations",
								"v2",
								"containers",
								":containerId",
								"trees",
								":treeId",
								"nodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "<input a limit in 2-200>",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "<input a offset in 2-200>",
									"disabled": true
								},
								{
									"key": "filter[isActive]",
									"value": "true",
									"disabled": true
								},
								{
									"key": "filter[createdBy]",
									"value": "System",
									"description": "user id. 'System' is the default system",
									"disabled": true
								},
								{
									"key": "filter[createdAt]",
									"value": "2021-03-04...",
									"description": "ISO 8601 time",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{location_container_id}}"
								},
								{
									"key": "treeId",
									"value": "default"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API References",
			"item": [
				{
					"name": "User @ Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get User@Me, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}); ",
									"",
									"pm.test(\"get user id \", function () {",
									"    var body = JSON.parse(responseBody);  ",
									"    pm.expect(body).not.eq(undefined); ",
									"    pm.environment.set(\"creator_id\", body.id); ",
									"    ",
									"});  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"disabled": true
							},
							{
								"key": "userId",
								"value": "200902260532621",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/users/me",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"users",
								"me"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Issues Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get issue types collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"get one issue sub type id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"",
									"    //the first issue type that contains sub types",
									"    var find = body.results.find(i=>i.subtypes.length>0)",
									"    pm.environment.set(\"one_issue_type_id\", find.id);",
									"    if(find){",
									"        pm.environment.set(\"one_sub_issue_type_id\", find.subtypes[0].id); ",
									"",
									"    }else{",
									"        pm.environment.set(\"one_sub_issue_type_id\", \"\"); ",
									"    } ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issue-types?include=subtypes",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issue-types"
							],
							"query": [
								{
									"key": "include",
									"value": "subtypes"
								},
								{
									"key": "limit",
									"value": "2",
									"description": "<input a limit in 2-200>",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "<input a offset in 2-200>",
									"disabled": true
								},
								{
									"key": "filter[isActive]",
									"value": "true",
									"disabled": true
								},
								{
									"key": "filter[createdBy]",
									"value": "System",
									"description": "user id. 'System' is the default system",
									"disabled": true
								},
								{
									"key": "filter[createdAt]",
									"value": "2021-03-04...",
									"description": "ISO 8601 time",
									"disabled": true
								},
								{
									"key": "filter[title]",
									"value": "xiaodong-type-category",
									"description": "search by title",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET issue-attribute-definitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get custom attributes definitions, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get custom definitions ids: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.results",
									"",
									"    pm.expect(find).not.eq(undefined); ",
									"    ",
									"    if(find){",
									"        //get all ids of custom attributes definitions",
									"        //assume at least 3 custom attributes types are available: text, date, dropdown",
									"        var text_custom_attribute_id = find.find(i=>i.dataType == \"text\").id",
									"        var dropdown_custom_attribute_id = find.find(i=>i.dataType == \"list\").id ",
									"        var one_dropdown_value = find.find(i=>i.dataType == \"list\").metadata.list.options[0].id;",
									"",
									"        pm.environment.set(\"text_custom_attribute_id\", text_custom_attribute_id); ",
									"       ",
									"        pm.environment.set(\"dropdown_custom_attribute_id\", dropdown_custom_attribute_id); ",
									"        pm.environment.set(\"one_dropdown_value\", one_dropdown_value); ",
									"",
									"    }else{",
									"        ",
									"    }",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issue-attribute-definitions?filter[dataType]=text,list",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issue-attribute-definitions"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "input a limit in 2-200",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "input a offset in 1-200",
									"disabled": true
								},
								{
									"key": "filter[dataType]",
									"value": "text,list",
									"description": "available: numeric,text,paragraph,list"
								},
								{
									"key": "filter[createdBy]",
									"value": "200902260532621",
									"description": "user id",
									"disabled": true
								},
								{
									"key": "filter[createdAt]",
									"value": "2022-03-08...",
									"description": "ISO 8601 time",
									"disabled": true
								},
								{
									"key": "filter[title]",
									"value": "numeric-demo",
									"description": "search by title",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET issue-attribute-mappings",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issue-attribute-mappings",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issue-attribute-mappings"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "input a limit in 2-200",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "input a offset in 1-200",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET issue-root-cause-categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get root causes collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"get one root cause id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"",
									"    //the first root cause category that contains root  cause",
									"    var find = body.results.find(i=>i.rootCauses.length>0)",
									"    pm.environment.set(\"one_root_cause_category_id\", find.id);",
									"    if(find){",
									"        pm.environment.set(\"one_root_cause_id\", find.rootCauses[0].id); ",
									"",
									"    }else{",
									"        pm.environment.set(\"one_root_cause_id\", \"\"); ",
									"    } ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issue-root-cause-categories?include=rootcauses",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issue-root-cause-categories"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "input a limit in 2-200",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "input a offset in 1-200",
									"disabled": true
								},
								{
									"key": "filter[createdBy]",
									"value": "System",
									"description": "user id. 'System' is the id of default",
									"disabled": true
								},
								{
									"key": "filter[createdAt]",
									"value": "2022-03-08...",
									"description": "ISO 8601 time",
									"disabled": true
								},
								{
									"key": "filter[title]",
									"value": "Design",
									"description": "search by title",
									"disabled": true
								},
								{
									"key": "include",
									"value": "rootcauses"
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get issues collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"get one issue id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"    if(body.results && body.results.length>0)",
									"    pm.environment.set(\"one_issue_id\", body.results[0].id); ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues?filter[qualityUrns]=urn:adsk.checklists.cs.instance.item:55b9a76f-ff85-4831-8bee-e2cedc10b967/84673735",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "input a limit in 2-200",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "<input a offset in 2-200>",
									"disabled": true
								},
								{
									"key": "filter[createdBy]",
									"value": "H525MUVW4AAB",
									"description": "user Id",
									"disabled": true
								},
								{
									"key": "filter[dueDate]",
									"value": "2022-01-14...",
									"description": "ISO8601. Three dots with date range",
									"disabled": true
								},
								{
									"key": "filter[deleted]",
									"value": "false",
									"disabled": true
								},
								{
									"key": "filter[createdAt]",
									"value": "2022-01-14..",
									"description": "ISO8601",
									"disabled": true
								},
								{
									"key": "filter[qualityUrns]",
									"value": "urn:adsk.checklists.cs.instance.item:55b9a76f-ff85-4831-8bee-e2cedc10b967/84673735"
								},
								{
									"key": "filter[displayId]",
									"value": "56",
									"disabled": true
								},
								{
									"key": "filter[assignedTo]",
									"value": "null",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET One Issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get issues collection, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"get one issue id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"    if(body.results && body.results.length>0)",
									"    pm.environment.set(\"one_issue_id\", body.results[0].id); ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues/:issueId",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues",
								":issueId"
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Issue-Basic",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var d = new Date()",
									"var current_date_time = d.getFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
									"pm.environment.set(\"current_date_time\", current_date_time);",
									"",
									"d.setUTCMinutes(d.getUTCDay()+10) //set due date  ",
									"",
									"var due_date = d.getUTCFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)  ",
									"pm.environment.set(\"due_date\", due_date);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"create issues, Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									" ",
									"pm.test(\"get one issue id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"    pm.environment.set(\"one_issue_id\", body.id); ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"title\": \"[{{current_date_time}}] create issue by Issue V2 API  \",\n        \"description\": \"create issue by {{creator_id}}\",\n        \"status\": \"open\",\n        \"assignedTo\": \"{{one_user_id}}\",\n        \"assignedToType\": \"user\",\n        \"dueDate\": \"{{due_date}}\",\n        \"issueSubtypeId\":\"{{one_sub_issue_type_id}}\", \n        \"rootCauseId\":\"{{one_root_cause_id}}\",\n        \"locationId\":\"{{one_location_id}}\"  \n}"
						},
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Issue Pushpin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var d = new Date()",
									"var current_date_time = d.getFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
									"pm.environment.set(\"current_date_time\", current_date_time);",
									"",
									"d.setUTCMinutes(d.getUTCDay()+10) //set due date  ",
									"",
									"var due_date = d.getUTCFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)  ",
									"pm.environment.set(\"due_date\", due_date);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"create issues, Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									" ",
									"pm.test(\"get one issue id: \", function () {",
									"    var body = JSON.parse(responseBody);",
									"    pm.environment.set(\"one_issue_id\", body.id); ",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"title\": \"[{{current_date_time}}]create issue by Issue V2 API-with Pushpin\",\n        \"description\": \"[{{current_date_time}}]create issue by Issue V2 API-with Pushpin\",\n        \"status\": \"open\",\n        \"assignedTo\": \"{{one_user_id}}\",\n        \"assignedToType\": \"user\",\n        \"dueDate\": \"{{due_date}}\",\n        \"issueSubtypeId\":\"{{one_sub_issue_type_id}}\", \n        \"rootCauseId\":\"{{one_root_cause_id}}\",\n        \"locationId\":\"{{one_location_id}}\",\n\n        //document and object data come from pushpin extension of APS viewer\n        //check the tutorial for details: \n        //https://aps.autodesk.com/en/docs/bim360/v1/tutorials/pushpins/create-pushpin-v2/\n\n        \"linkedDocuments\": [\n        {\n            \"type\": \"TwoDVectorPushpin\",\n            //oss urn of document \n            \"urn\": \"urn:adsk.wipprod:dm.lineage:o1tdy8CEReW4XeExcRqh1w\", \n            //document version \n            \"createdAtVersion\": 3, \n            \"details\": {\n                \"viewable\": {\n                    //viewerable id\n                    \"id\": \"250a6ce5-ee70-fdca-bfc9-4111f54e9baa\",\n                     //  id of the view to load\n                    \"guid\": \"250a6ce5-ee70-fdca-bfc9-4111f54e9baa\",\n                    //name of the view\n                    \"name\": \"{3D}\",\n                    //is 3D or 2D\n                    \"is3D\": true \n                },\n                //object position\n                \"position\": {\n                    \"x\": -17.252720948028553,\n                    \"y\": 39.8403441619185,\n                    \"z\": 11.591292255137159\n                },\n                //svf2 or svf id of object\n                \"objectId\": 4352,\n                //external id of the object\n                \"externalId\": \"a6aa132d-ccd7-408f-b2f9-ed67350c8c3a-0003b64a\",\n                //view state \n                \"viewerState\": {\n                    //document urn in based64 encoded\n                    \"seedURN\": \"dXJuOmFkc2sud2lwcHJvZDpmcy5maWxlOnZmLm8xdGR5OENFUmVXNFhlRXhjUnFoMXc_dmVyc2lvbj0z\",\n                    //camera data\n                    \"viewport\": {\n                        \"up\": [\n                            0.3254195128849336,\n                            0.4239431401196343,\n                            0.8452066934065516\n                        ],\n                        \"eye\": [\n                            \"-78.4092659603074\",\n                            \"-131.08779271184284\",\n                            \"99.36837920443212\"\n                        ],\n                        \"name\": \"\",\n                        \"target\": [\n                            \"-5.115284533116451\",\n                            \"-35.60341206531248\",\n                            \"23.255352179268133\"\n                        ],\n                        \"pivotPoint\": [\n                            \"10.865917205810547\",\n                            \"-10.835281372070312\",\n                            \"13.451443724662813\"\n                        ],\n                        \"projection\": \"orthographic\",\n                        \"aspectRatio\": 1.502717391304348,\n                        \"worldUpVector\": [\n                            0,\n                            0,\n                            1\n                        ],\n                        \"isOrthographic\": true,\n                        \"distanceToOrbit\": 172.48677876175668,\n                        \"orthographicHeight\": 142.4165283379505\n                    },\n                    //other information of the view\n                    \"cutplanes\": [],\n                    \"floorGuid\": null,\n                    \"objectSet\": [\n                        {\n                            \"id\": [\n                                443\n                            ],\n                            \"hidden\": [],\n                            \"idType\": \"lmv\",\n                            \"isolated\": [],\n                            \"explodeScale\": 0\n                        }\n                    ],\n                    \"globalOffset\": {\n                        \"x\": -1.5187797546386719,\n                        \"y\": -48.585296630859375,\n                        \"z\": 10.43277554991916\n                    },\n                    \"renderOptions\": {\n                        \"toneMap\": {\n                            \"method\": 1,\n                            \"exposure\": -7,\n                            \"lightMultiplier\": -1e-20\n                        },\n                        \"appearance\": {\n                            \"ghostHidden\": true,\n                            \"antiAliasing\": true,\n                            \"displayLines\": true,\n                            \"ambientShadow\": false,\n                            \"displayPoints\": true,\n                            \"swapBlackAndWhite\": false,\n                            \"progressiveDisplay\": true\n                        },\n                        \"environment\": \"Boardwalk\",\n                        \"ambientOcclusion\": {\n                            \"radius\": 13.123359580052492,\n                            \"enabled\": false,\n                            \"intensity\": 1\n                        }\n                    },\n                    \"attributesVersion\": 2\n                }\n            }\n        }\n    ]\n\n}"
						},
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"create comment for one issue. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var d = new Date()",
									"var current_date_time = d.getFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
									"pm.environment.set(\"current_date_time\", current_date_time);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"issueId\": \"{{one_issue_id}}\",\n        \"body\": \"This is a comment created by API by {{creator_id}} at {{current_date_time}}.\\nnew line\"\n }"
						},
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues/:issueId/comments",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues",
								":issueId",
								"comments"
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get one issue comments collection. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues/:issueId/comments",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues",
								":issueId",
								"comments"
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Attachments with document in visible folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Attachments with document in visible folder. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"test by v2 API with with document in visible folder\",\n    \"urn\":\"{{one_document_base64_urn}}\",\n    \"urnType\":\"dm\" \n}"
						},
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues/:issueId/attachments",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues",
								":issueId",
								"attachments"
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{project_id_without_b}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Attachments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get one issue attachments collection. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"",
									"pm.test(\"get bucket key and objecy key of one attachment: \", function () {",
									"    var body = JSON.parse(responseBody); ",
									"    var urn = body.results[0].urn",
									"    var urnType = body.results[0].urnType",
									"    console.log(urn)",
									"    console.log(urnType)",
									"",
									"    if(urnType == \"oss\"){ //file from local uploading. In invisible folder",
									"     var split_by_splash = urn.split(\"/\")",
									"     var split_by_colon = split_by_splash[0].split(\":\")",
									" ",
									"     pm.environment.set(\"attachment_object_key\", split_by_splash[1]); ",
									"     pm.environment.set(\"attachment_bucket_key\", split_by_colon[3]); ",
									"    }else{ //dm : document from visible folder",
									"        ",
									"    }",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues/:issueId/attachments",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues",
								":issueId",
								"attachments"
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Issue-with Custom Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"create issues with custom attribute, Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"title\": \"[{{current_date_time}}]create issue by API-with custom attributes\",\n        \"description\": \"create issue by API- with custom attributes\",\n        \"status\": \"open\",\n        \"assignedTo\": \"{{one_user_id}}\",\n        \"assignedToType\": \"user\",\n        \"dueDate\": \"{{due_date}}\",\n        \"issueSubtypeId\":\"{{one_sub_issue_type_id}}\",\n        \"rootCauseId\":\"{{one_root_cause_id}}\",\n        \"locationId\":\"{{one_location_id}}\", \n        \"customAttributes\": [\n          {\n            \"attributeDefinitionId\": \"{{text_custom_attribute_id}}\",\n            \"value\": \"demo values of custom attribute\"\n          },\n          {\n            \"attributeDefinitionId\": \"{{dropdown_custom_attribute_id}}\",\n            \"value\": \"{{one_dropdown_value}}\"\n          } \n        ]\n}\n "
						},
						"url": {
							"raw": "{{base_domain}}/construction/issues/v1/projects/:projectId/issues",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"issues",
								"v1",
								"projects",
								":projectId",
								"issues"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{issue_container_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Issue-Basic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Patch one issue. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var d = new Date()",
									"var current_date_time = d.getFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
									"pm.environment.set(\"current_date_time\", current_date_time);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"title\": \"Patch issue -change status to close -  by {{creator_id}} at {{current_date_time}}\",\n        \"description\": \"Patch issue -change status to close -  by {{creator_id}} at {{current_date_time}}\",\n        \"status\": \"closed\" \n\n}"
						},
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues/:issueId",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues",
								":issueId"
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Issue-with Custom Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Patch one issue with custom attributes. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var d = new Date()",
									"var current_date_time = d.getFullYear() ",
									"                +\"-\" + ((\"0\" + (d.getUTCMonth()+1)).slice(-2) )",
									"                + \"-\" +  (\"0\" + d.getUTCDate()).slice(-2)",
									"pm.environment.set(\"current_date_time\", current_date_time);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n       \"title\": \"Patch issue by {{creator_id}} at {{current_date_time}} with custom attributes\",\n        \"description\": \"patch one issue by {{creator_id}} at {{current_date_time}} with custom attributes\",\n        \"status\": \"open\",\n        \"customAttributes\": [\n          {\n            \"attributeDefinitionId\": \"{{text_custom_attribute_id}}\",\n            \"value\": \"patch issue: demo values of custom attribute\"\n          },\n          {\n            \"attributeDefinitionId\": \"{{dropdown_custom_attribute_id}}\",\n            \"value\": \"{{one_dropdown_value}}\"\n          }\n        ] \n}"
						},
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues/:issueId",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues",
								":issueId"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "200",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Reference by Relationship API",
			"item": [
				{
					"name": "00-Supported Relationships to Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/bim360/relationship/v2/utility/relationships:writable",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"relationship",
								"v2",
								"utility",
								"relationships:writable"
							]
						}
					},
					"response": []
				},
				{
					"name": "01-Get One Asset Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"01-Get One Asset Id, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"get one asset id\", function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.results;",
									"",
									"    pm.expect(find).not.eq(undefined); ",
									"",
									"     if(find && find.length>0)",
									"        pm.environment.set(\"one_asset_id\",find[0].id); ",
									"     ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v2/projects/:projectId/assets",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v2",
								"projects",
								":projectId",
								"assets"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "02-Add Reference of Issue with Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add Reference of Issue with Asset, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n           {\n             \"entities\": [\n               {\n                 \"domain\": \"autodesk-bim360-issue\",\n                 \"type\": \"issue\",\n                 \"id\": \"{{one_issue_id}}\"\n               },\n               {\n                 \"domain\": \"autodesk-bim360-asset\",\n                 \"type\": \"asset\",\n                 \"id\": \"{{one_asset_id}}\" \n               }\n             ]\n           }\n         ]"
						},
						"url": {
							"raw": "{{base_domain}}/bim360/relationship/v2/containers/:containerId/relationships",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"relationship",
								"v2",
								"containers",
								":containerId",
								"relationships"
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "03-Search Relationship of Issues and Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search Relationship with Domain and Type - Asset, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"relationships is not null\", function () {",
									"    var body = JSON.parse(responseBody);",
									"    var find = body.relationships;",
									"",
									"    pm.expect(find).not.eq(undefined); ",
									"     ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/bim360/relationship/v2/containers/:projectId/relationships:search?domain=autodesk-bim360-issue&type=issue&id={{one_issue_id}}&withDomain=autodesk-bim360-asset&withType=asset",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"relationship",
								"v2",
								"containers",
								":projectId",
								"relationships:search"
							],
							"query": [
								{
									"key": "domain",
									"value": "autodesk-bim360-issue"
								},
								{
									"key": "type",
									"value": "issue"
								},
								{
									"key": "id",
									"value": "{{one_issue_id}}"
								},
								{
									"key": "withDomain",
									"value": "autodesk-bim360-asset"
								},
								{
									"key": "withType",
									"value": "asset"
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{project_id_without_b}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Upload Local Attachment",
			"item": [
				{
					"name": "POST Attachments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Attachments with oss type for local attachment. Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"get bucket key and objecy key of the attachment: \", function () {",
									"    var body = JSON.parse(responseBody); ",
									"    pm.environment.set(\"one_attachment_id\", body.id); ",
									"",
									"    var urn = body.urn",
									"     var split_by_splash = urn.split(\"/\")",
									" ",
									"    var split_by_colon = split_by_splash[0].split(\":\")",
									"",
									"    pm.environment.set(\"attachment_object_key\", split_by_splash[1]); ",
									"    pm.environment.set(\"attachment_bucket_key\", split_by_colon[3]); ",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"test by v2 API for local file.png\",\n    \"urnType\":\"oss\" \n}"
						},
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues/:issueId/attachments",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues",
								":issueId",
								"attachments"
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate a signed S3 URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Generate a signed S3 URL. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									" //since an image file would not be in large size, we assume it is one url of uploading",
									" pm.test(\"get upload url: \", function () {",
									"    var body = JSON.parse(responseBody);  ",
									"    pm.environment.set(\"s3_upload_url\", body.urls[0]) ",
									"    pm.environment.set(\"s3_upload_key\", body.uploadKey) ",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_domain}}/oss/v2/buckets/:bucket/objects/:object/signeds3upload",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"oss",
								"v2",
								"buckets",
								":bucket",
								"objects",
								":object",
								"signeds3upload"
							],
							"variable": [
								{
									"key": "bucket",
									"value": "{{attachment_bucket_key}}"
								},
								{
									"key": "object",
									"value": "{{attachment_object_key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate upload of a file to the signed URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Initiate upload of a file to the signed URL. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/xiaodongliang/Documents/Screenshots/Screen Shot 2023-01-09 at 3.54.51 PM.png"
							}
						},
						"url": {
							"raw": "{{s3_upload_url}}",
							"host": [
								"{{s3_upload_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Compelte a signed S3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Compelte a signed S3. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"uploadKey\":\"{{s3_upload_key}}\"}"
						},
						"url": {
							"raw": "{{base_domain}}/oss/v2/buckets/:bucket/objects/:object/signeds3upload",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"oss",
								"v2",
								"buckets",
								":bucket",
								"objects",
								":object",
								"signeds3upload"
							],
							"variable": [
								{
									"key": "bucket",
									"value": "{{attachment_bucket_key}}"
								},
								{
									"key": "object",
									"value": "{{attachment_object_key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue service that the file uploaded",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update issue service that the file uploaded. Status code is 200\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"uploadKey\":\"{{s3_upload_key}}\"}"
						},
						"url": {
							"raw": "{{base_domain}}/issues/v2/containers/:containerId/issues/:issueId/attachments/:attachmentId?task=post-upload-process",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"issues",
								"v2",
								"containers",
								":containerId",
								"issues",
								":issueId",
								"attachments",
								":attachmentId"
							],
							"query": [
								{
									"key": "task",
									"value": "post-upload-process"
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{project_id_without_b}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								},
								{
									"key": "attachmentId",
									"value": "{{one_attachment_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Download Attachment",
			"item": [
				{
					"name": "01-GET Attachments(assume id of one issue is available)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get one issue attachments collection. Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"",
									"pm.test(\"get bucket key and objecy key of one attachment: \", function () {",
									"    var body = JSON.parse(responseBody); ",
									"    var urn = body.results[0].urn",
									"    var urnType = body.results[0].urnType",
									"    console.log(urn)",
									"    console.log(urnType)",
									"",
									"    if(urnType == \"oss\"){ //file from local uploading. In invisible folder",
									"     var split_by_splash = urn.split(\"/\")",
									"     var split_by_colon = split_by_splash[0].split(\":\")",
									" ",
									"     pm.environment.set(\"attachment_object_key\", split_by_splash[1]); ",
									"     pm.environment.set(\"attachment_bucket_key\", split_by_colon[3]); ",
									"    }else{ //dm : document from visible folder",
									"        var split_by_underscore = urn.split('_')",
									"        var version_urn = Buffer.from(split_by_underscore[0], 'base64').toString('utf8') + \"%3F\"",
									"                          + Buffer.from(split_by_underscore[1], 'base64').toString('utf8')",
									"        console.log(version_urn)",
									"        //version_urn = encodeURI(version_urn)",
									"        pm.environment.set(\"version_urn\", version_urn); ",
									"",
									"        //next, run the script: 02-GET Oss Storage Urn (if urnType = dm)  to get bucket key and object key",
									"    }",
									"    ",
									"});",
									"",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}issues/v2/containers/:containerId/issues/:issueId/attachments",
							"host": [
								"{{base_domain}}issues"
							],
							"path": [
								"v2",
								"containers",
								":containerId",
								"issues",
								":issueId",
								"attachments"
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{issue_container_id}}"
								},
								{
									"key": "issueId",
									"value": "{{one_issue_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "02-GET Oss Storage Urn (if urnType = dm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"04-GET One Document Data, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"find data of first document\", function () {",
									"    var body = JSON.parse(responseBody); ",
									"    var oss_storage_urn = body.data.relationships.storage.data.id",
									"    console.log(oss_storage_urn)",
									"     var split_by_splash = oss_storage_urn.split(\"/\")",
									"     var split_by_colon = split_by_splash[0].split(\":\")",
									" ",
									"     pm.environment.set(\"attachment_object_key\", split_by_splash[1]); ",
									"     pm.environment.set(\"attachment_bucket_key\", split_by_colon[3]); ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/data/v1/projects/:project_id/versions/:version_id",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"versions",
								":version_id"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "b.{{project_id_without_b}}"
								},
								{
									"key": "version_id",
									"value": "{{version_urn}}"
								}
							]
						},
						"description": "GET all projects of one hub, and get one project Please provide the hub name (project_name) in environment variables"
					},
					"response": []
				},
				{
					"name": "03-GET S3 signed url for downloading attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET S3 signed url for downloading attachment. Status code is 200\", function () {",
									"    pm.environment.set(\"s3_download_url\", JSON.parse(responseBody).url); ",
									"",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/oss/v2/buckets/:bucketKey/objects/:objectKey/signeds3download",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"oss",
								"v2",
								"buckets",
								":bucketKey",
								"objects",
								":objectKey",
								"signeds3download"
							],
							"variable": [
								{
									"key": "bucketKey",
									"value": "{{attachment_bucket_key}}"
								},
								{
									"key": "objectKey",
									"value": "{{attachment_object_key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04-Download binary by S3 signed url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{s3_download_url}}",
							"host": [
								"{{s3_download_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication-2legged-backup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"access_token\", data.access_token);",
							"postman.setEnvironmentVariable(\"expires_in\", data.expires_in);",
							"postman.setEnvironmentVariable(\"token_type\", data.token_type);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"var keys = pm.environment.get(\"client_id\") + \":\" +  pm.environment.get(\"client_secret\");\r",
							"let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys)); \r",
							"pm.collectionVariables.set(\"encodedKeys\",encodedKeys);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Basic {{encodedKeys}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "data:read data:write",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_domain}}/authentication/v2/token",
					"host": [
						"{{base_domain}}"
					],
					"path": [
						"authentication",
						"v2",
						"token"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://developer.api.autodesk.com/authentication/v2/token",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://developer.api.autodesk.com/authentication/v2/authorize",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "data:read account:read data:write",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{client_secret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{client_id}}",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://www.getpostman.com/oauth2/callback",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "access_token",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}